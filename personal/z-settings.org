* Overview
This is the custom part of my emacs config.
At the moment it's based on emacs-prelude, although I configure some parts differently.
For example, I have spaceline instead of smart-mode-line, and a custom company configuration.

Many things in here are inspired by Uncle Dave's emacs config, and a large amount of random
config snippets I found around the internet.

In the first section, I have general setup of UI or global modes such as line numbers, custom
keybinds, the mode line and more.

In the second section, there's major-mode specific settings for those modes that are important
to me.

* UI/global
** Darwin
Custom configuration for Mac OSX. I'm using Mitsuharu Yamamoto's emacs-mac,
which requires some different settings than what prelude provides.

Setup as follows:
- fn      --> Hyper
- Ctrl    --> Control
- Option  --> Meta
- Command --> Super

Settings outside of emacs (System menu and Karabiner Elements):
- Caps Lock --> Control
- Return    --> Control ([[http://emacsredux.com/blog/2017/12/31/a-crazy-productivity-boost-remapping-return-to-control-2017-edition/][see this article]])

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin) ;; mac specific settings
    (setq mac-option-modifier 'meta)
    ;; (setq mac-right-option-modifier 'none)
    (setq mac-command-modifier 'super)
    (setq mac-function-modifier 'hyper)
    (global-set-key [kp-delete] 'delete-char)
    ;; For some reason lockfiles break python anaconda-mode's autocomplete
    (setq create-lockfiles nil))
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)))
    (setq dashboard-banner-logo-title "")
    (add-to-list 'dashboard-items '(agenda) t))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
 (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
 (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+END_SRC
** Scrolling
#+BEGIN_SRC emacs-lisp
(pixel-scroll-mode 1)
(scroll-bar-mode -1)
#+END_SRC
** Shortcuts / keybinds
*** config-visit
#+BEGIN_SRC emacs-lisp
  ;; Custom shortcut to open this file.
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/personal/z-settings.org"))

  (global-set-key (kbd "C-c v c") 'config-visit)

  (defun config-reload ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/personal/z-settings.org"))

  (global-set-key (kbd "C-c v r") 'config-reload)
#+END_SRC
*** key-chords
#+BEGIN_SRC emacs-lisp
  (key-chord-define-global "xf" 'iy-go-to-char)
  (key-chord-define-global "xd" 'iy-go-to-char-backward)
#+END_SRC
*** switch-window
#+BEGIN_SRC emacs-lisp
  ;; switch-window settings
  ;; Override global key bindings for switching windows.
  (global-set-key (kbd "C-x o") 'switch-window)
  (global-set-key (kbd "C-x 1") 'switch-window-then-maximize)
  (global-set-key (kbd "C-x 2") 'switch-window-then-split-below)
  (global-set-key (kbd "C-x 3") 'switch-window-then-split-right)
  (global-set-key (kbd "C-x 0") 'switch-window-then-delete)

  (global-set-key (kbd "C-x 4 d") 'switch-window-then-dired)
  (global-set-key (kbd "C-x 4 f") 'switch-window-then-find-file)
  (global-set-key (kbd "C-x 4 m") 'switch-window-then-compose-mail)
  (global-set-key (kbd "C-x 4 r") 'switch-window-then-find-file-read-only)

  (global-set-key (kbd "C-x 4 C-f") 'switch-window-then-find-file)
  (global-set-key (kbd "C-x 4 C-o") 'switch-window-then-display-buffer)

  (global-set-key (kbd "C-x 4 0") 'switch-window-then-kill-buffer)

  ;; Use home row instead of number keys.
  (setq switch-window-input-style 'minibuffer)
  (setq switch-window-increase 6)
  (setq switch-window-threshold 2)
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" ";" "w" "e" "i" "o"))

  ;; Prelude also comes with ace-window, which uses custom keybinds (Super-w).
  ;; Set it to also use homerow keys instead of numbers for buffers.
  ;; TODO: decide which one I like better, e.g.
  ;; (Super-w v a) or (C-x 2 a) to split window a.

  (setq aw-keys '(?a ?s ?d ?f ?k ?l ?\; ?w ?e ?i))
#+END_SRC
*** multiple-cursors
#+BEGIN_SRC emacs-lisp
  ;; Multiple cursors
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)

  ;; If nothing is selected, pick the symbol under the cursor.
  (global-set-key (kbd "C->") 'mc/mark-next-like-this-symbol)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this-symbol)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "H-SPC") 'set-rectangular-region-anchor)

  ;; Special commands for inserting numbers or chars, sorting and reversing.
  (global-set-key (kbd "C-c m n") 'mc/insert-numbers)
  (global-set-key (kbd "C-c m l") 'mc/insert-letters)
  (global-set-key (kbd "C-c m s") 'mc/sort-regions)
  (global-set-key (kbd "C-c m r") 'mc/reverse-regions)
#+END_SRC
** Modeline
*** Nyan cat mode
#+BEGIN_SRC emacs-lisp
  ;; Nyan cat mode
  (setq nyan-animate-nyancat t)
  (setq nyan-wavy-trail t)
  (setq nyan-bar-length 13)
  (nyan-mode 1)
#+END_SRC

*** Mode line
Use spaceline (powerline) with emacs theme.
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :config
  (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-emacs-theme))
#+END_SRC
*** Clock and battery
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format " %H:%M ")
(setq display-time-default-load-average nil)
(display-battery-mode 0)

(display-time-mode 1)

(use-package fancy-battery
  :ensure t
  :config
    (setq fancy-battery-show-percentage t)
    (setq battery-update-interval 15)
    (if window-system
      (fancy-battery-mode)
      (display-battery-mode)))
#+END_SRC
*** Line and column numbers
#+BEGIN_SRC emacs-lisp
(setq line-number-mode t)
(setq column-number-mode t)
(spaceline-toggle-line-column-on)

#+END_SRC
*** Hide minor modes
#+BEGIN_SRC emacs-lisp
(spaceline-toggle-minor-modes-off)
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-minimum-prefix-length 3)
      (setq company-idle-delay 0)
      (setq company-tooltip-limit 10)
      (add-hook 'prog-mode-hook 'company-mode))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))

    ;; (add-to-list 'company-backends 'company-dabbrev-code)
    ;; (add-to-list 'company-backends 'company-yasnippet)
    ;; (add-to-list 'company-backends 'company-files)
#+END_SRC
** Desktop
Not currently in use while trying dashboard.
#+BEGIN_SRC emacs-lisp
  ;; (setq desktop-dirname             "~/.emacs.d/desktop/"
  ;;       desktop-base-file-name      "emacs.desktop"
  ;;       desktop-base-lock-name      "lock"
  ;;       desktop-path                (list desktop-dirname)
  ;;       desktop-save                t
  ;;       desktop-files-not-to-save   "^$" ;reload tramp paths
  ;;       desktop-load-locked-desktop nil
  ;;       desktop-auto-save-timeout   30)
  ;; (desktop-save-mode 1)
#+END_SRC
** nlinum
#+BEGIN_SRC emacs-lisp
  (setq nlinum-highlight-current-line t)
  (setq nlinum-format "%4d \u2502")

  ;; Use this to have nlinum globally.
  ;; (global-nlinum-mode 1)

  (defun nlinum-set-face-attribute ()
    (set-face-attribute 'nlinum-current-line nil :background "gray20")
    (set-face-attribute 'linum nil :background "gray30" :foreground "gray80"))

  (add-hook 'nlinum-mode-hook 'nlinum-set-face-attribute)
  (add-hook 'prog-mode-hook 'nlinum-mode)
#+END_SRC
** whitespace-mode
#+BEGIN_SRC emacs-lisp
  ;; Enable mode, and whitespace cleanup on save.
  (setq prelude-whitespace t)
  (setq prelude-clean-whitespace-on-save t)

  ;; Mark lines exceeding 80 columns.
  (setq whitespace-line-column 80)
  ;; Set whitespace style: cleanup empty lines / trailing whitespace, show whitespace characters.
  (setq whitespace-style '(empty trailing face lines-tail indentation::space tabs newline tab-mark newline-mark))
  ;; Use spaces instead of tabs by default.
  (setq-default indent-tabs-mode nil)
#+END_SRC
** dotenv-mode
#+BEGIN_SRC emacs-lisp
;; dotenv-mode
;; Also apply to .env with extension such as .env.local
(add-to-list 'auto-mode-alist '("\\.env\\..*\\'" . dotenv-mode))
#+END_SRC
** Helm
#+BEGIN_SRC emacs-lisp
  ;; Use swiper (with helm backend) for search.
  (global-set-key (kbd "C-s") 'swiper)

  ;; Use tab to expand stuff in helm. (Sorry)
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)

  ;; Fuzzy matching everywhere
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  ;; For some reason this needs to be specified separately
  (setq helm-M-x-fuzzy-match t)

  ;; Additional Helm-related packages
  (use-package helm-flx
    :ensure t
    :config
    (helm-flx-mode +1)
    (setq helm-flx-for-helm-find-files t ;; t by default
          helm-flx-for-helm-locate t) ;; nil by default
    )
#+END_SRC
** dot-mode
#+BEGIN_SRC emacs-lisp
  ;; Create shortcut for things like the scratch buffer.
  (global-set-key [(control ?.)] (lambda () (interactive) (dot-mode 1)
                                   (message "Dot mode activated.")))

  ;; Turn on all the time.
  (add-hook 'find-file-hooks 'dot-mode-on)
#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** pretty-symbols
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package pretty-mode
      :ensure t
      :config
      (global-pretty-mode t)))

  (global-prettify-symbols-mode +1)
#+END_SRC
** EMMS
#+BEGIN_SRC emacs-lisp
  (emms-all)
  (emms-default-players)

  (emms-mode-line 1)
  (emms-playing-time 1)
  (emms-mode-line-cycle 1)
#+END_SRC
** elcord
Rich presence for Discord.
#+BEGIN_SRC emacs-lisp
(use-package elcord
    :ensure t
    :config
    (elcord-mode))
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))

  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'latex-mode-hook 'yas-minor-mode)
  (add-hook 'org-mode-hook 'yas-minor-mode)
#+END_SRC
** magit
Extra magit settings. I refresh the magit buffer on file save because it's
annoying to do so manually. Also, use magithub for GitHub integration in Magit.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "magit"
      (add-hook 'after-save-hook 'magit-after-save-refresh-status))

  (use-package magithub
    :after magit
    :config
    (magithub-feature-autoinject t)
    (setq magithub-clone-default-directory "~/projects"))
#+END_SRC
** hideshow
#+BEGIN_SRC emacs-lisp
  (use-package hideshow-org
    :ensure t
    :config
    ()
    (add-hook 'prog-mode-hook 'hs-org/minor-mode))
#+END_SRC
** god mode
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'god-mode
    (define-key god-local-mode-map (kbd "i") 'god-local-mode)
    (define-key god-local-mode-map (kbd ".") 'repeat))
#+END_SRC
** StackExchange / sx
#+BEGIN_SRC emacs-lisp
  (use-package sx
    :config
    (bind-keys :prefix "C-c v"
               :prefix-map my-sx-map
               :prefix-docstring "Global keymap for SX."
               ("q" . sx-tab-all-questions)
               ("i" . sx-inbox)
               ("o" . sx-open-link)
               ("u" . sx-tab-unanswered-my-tags)
               ("a" . sx-ask)
               ("s" . sx-search)))
#+END_SRC
* Major modes
** C/C++
#+BEGIN_SRC emacs-lisp
  ;; Some C/C++ settings.

  ;; company + company-irony
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;; ctags
  (setq path-to-ctags "/usr/local/bin/ctags")

  (defun create-tags (dir-name)
    "Create tags file."
    (interactive "DDirectory: ")
    (shell-command
     (format "%s -f TAGS -R %s" path-to-ctags (directory-file-name dir-name))))

  (defadvice find-tag (around refresh-etags activate)
    "Rerun etags and reload tags if tag not found and redo find-tag.
     If buffer is modified, ask about save before running etags."
    (let ((extension (file-name-extension (buffer-file-name))))
      (condition-case err
          ad-do-it
        (error (and (buffer-modified-p)
                    (not (ding))
                    (y-or-n-p "Buffer is modified, save it? ")
                    (save-buffer))
               (er-refresh-etags extension)
               ad-do-it))))

  (defun er-refresh-etags (&optional extension)
    "Run etags on all peer files in current dir and reload them silently."
    (interactive)
    (shell-command (format "etags *.%s" (or extension "el")))
    (let ((tags-revert-without-query t))  ; don't query, revert silently
      (visit-tags-table default-directory nil)))

  ;; Use clang for formatting and flycheck in C/C++.
  (flycheck-clang-analyzer-setup)

  (global-set-key (kbd "C-c c f") 'clang-format-region)
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  ;; yasnippet
  (add-hook 'python-mode-hook 'yas-minor-mode)

  ;; Set tab with to 4.
  (add-hook 'python-mode-hook
            (lambda ()
              (setq-default tab-width 4)))

  ;; virtualenvwrapper init for eshell and interactive shell.
  (venv-initialize-interactive-shells) ;; if you want interactive shell support
  (venv-initialize-eshell) ;; if you want eshell support

  ;; anaconda-mode: It's mostly set up in prelude already.

  ;; virtualenvwrapper
  (use-package virtualenvwrapper
    :ensure t
    :config
    (setq projectile-switch-project-action
          '(lambda ()
             (venv-projectile-auto-workon)
             (projectile-find-file))))

  ;; py-isort
  (use-package py-isort
    :ensure t
    :config
    (add-hook 'before-save-hook 'py-isort-before-save))

  ;; yapf
  (use-package py-yapf
    :ensure t
    :config
    (add-hook 'python-mode-hook 'py-yapf-enable-on-save))
#+END_SRC
** Org
Snippet for writing elisp like everywhere around this file.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
